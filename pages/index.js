import { useEffect, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";
import useAuth from "../hooks/useAuth";
//components
const Header = dynamic(() => import("../components/Header/Header"));
const Feeds = dynamic(() => import("../components/Feeds/Feeds"));
const ViewStoriesModal = dynamic(() =>
  import("../components/Modal/ViewStoriesModal")
);
const MenuModal = dynamic(() => import("../components/Modal/MenuModal"));

//config
import db from "../config/firebase";

//redux
import { useDispatch, useSelector } from "react-redux";
import { addUserList } from "../features/userSlice";
import {
  selectMenuModalIsOpen,
  selectViewStoriesModalIsOpen,
} from "../features/modalSlice";

export default function Home({ usersList }) {
  const { user } = useAuth();
  const [userData, setUserData] = useState([]);
  const [photo, setPhoto] = useState([]);
  const [nouserPhoto, setNouserPhoto] = useState([]);
  const [myPhtoto, setMyphoto] = useState([]);
  const openViewStoriesModal = useSelector(selectViewStoriesModalIsOpen);
  const menuModal = useSelector(selectMenuModalIsOpen);
  const dispatch = useDispatch();
  const following = userData?.following;
  const [allphotos, setAllPhotos] = useState([]);

  useEffect(() => {
    db.collection("users")
      .doc(user?.uid)
      .get()
      .then((documentSnapshot) => {
        if (!documentSnapshot.exists) {
        } else {
          //console.log('User data: ', documentSnapshot.data());
          setUserData(documentSnapshot.data());
        }
      });
  }, [db, user]);

  useEffect(() => {
    dispatch(addUserList(JSON.parse(usersList)));
  }, []);

  useEffect(() => {
    let unsubscribe;

    const fetchPhotos = () => {
      if (user) {
        const followingUsers = following?.length > 0 ? following : ["test"];
        unsubscribe = db
          .collection("photos")
          .where("userId", "in", [...followingUsers])
          .onSnapshot((snapshot) => {
            setPhoto(
              snapshot?.docs.map((doc) => ({
                id: doc?.id,
                ...doc?.data(),
              }))
            );
          });
      }
    };
    fetchPhotos();
    return unsubscribe;
  }, [db, following, user, userData]);

  useEffect(() => {
    let unsubscribe;
    const fetchMyPhotos = () => {
      if (user) {
        unsubscribe = db
          .collection("photos")
          .where("userId", "==", user?.uid)
          .onSnapshot((snapshot) => {
            setMyphoto(
              snapshot?.docs.map((doc) => ({
                id: doc?.id,
                ...doc?.data(),
              }))
            );
          });
      } else {
        setMyphoto([]);
      }
    };
    fetchMyPhotos();
    return unsubscribe;
  }, [db, user]);

  useEffect(() => {
    let unsubscribe;

    const fetchPhotos = () => {
      if (!user) {
        db.collection("photos").onSnapshot((snapshot) => {
          setNouserPhoto(
            snapshot?.docs.slice(0, 2).map((doc) => ({
              id: doc?.id,
              ...doc?.data(),
            }))
          );
        });
      } else {
        setNouserPhoto([]);
      }
    };
    fetchPhotos();
    return unsubscribe;
  }, [db, user]);

  useEffect(() => {
    let unsubscribe;
    const joinPhotos = () => {
      if (user) {
        let allphoto = [];
        allphoto.push(
          ...myPhtoto.sort((a, b) => b.timestamp - a.timestamp),
          ...photo.sort((a, b) => b.timestamp - a.timestamp)
        );
        setAllPhotos(allphoto);
      }
    };
    joinPhotos();
    return unsubscribe;
  }, [user, myPhtoto, photo]);

  return (
    <div className="bg-gray-50 h-screen overflow-y-scroll scrollbar-hide">
      <Head>
        <title>ZH Instagram</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header usersList={JSON.parse(usersList)} />
      <Feeds photo={user ? allphotos : nouserPhoto} userData={userData} />

      {openViewStoriesModal && <ViewStoriesModal />}
      {menuModal && <MenuModal />}
    </div>
  );
}

export async function getServerSideProps() {
  const ref = db.collection("users");

  const usersRes = await ref.get();
  const users = usersRes.docs.map((user) => ({
    id: user.id,
    ...user.data(),
  }));

  return {
    props: {
      usersList: JSON.stringify(users),
    },
  };
}
