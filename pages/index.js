import { useEffect } from "react";
import Head from "next/head";

//components
import Header from "../components/Header/Header";
import Feeds from "../components/Feeds/Feeds";

//config
import db, { auth } from "../config/firebase";
import { useAuthState } from "react-firebase-hooks/auth";
import { useDocument, useCollectionOnce } from "react-firebase-hooks/firestore";

//redux
import { useDispatch, useSelector } from "react-redux";
import { addUserList, login } from "../features/userSlice";
import {
  selectMenuModalIsOpen,
  selectPostImageModalIsOpen,
  selectPostStoriesModalIsOpen,
  selectViewStoriesModalIsOpen,
} from "../features/modalSlice";
import PostStoriesModal from "../components/Modal/PostStoriesModal";
import ViewStoriesModal from "../components/Modal/ViewStoriesModal";
import useStories from "../service/use-stories";
import { addStories } from "../features/storiesSlice";
import MenuModal from "../components/Modal/MenuModal";
import PostImageModal from "../components/Modal/PostImageModal";

export default function Home({ usersList, photos, stories }) {
  const [user] = useAuthState(auth);
  const userDataRef = db.collection("users").doc(user?.uid);
  const [userData, loading] = useDocument(userDataRef);
  const userId = user?.uid;
  const following = userData?.data().following;
  const newUserData = { userId, following };
  //const { stories } = useStories(newUserData);

  const openPostStoryModal = useSelector(selectPostStoriesModalIsOpen);
  const openViewStoriesModal = useSelector(selectViewStoriesModalIsOpen);
  const menuModal = useSelector(selectMenuModalIsOpen);
  const postImageModal = useSelector(selectPostImageModalIsOpen);
  //const [userList, setUserList] = useState([]);
  //const [snapshot] = useCollectionOnce(db.collection("users"));
  const dispatch = useDispatch();

  const email = userData?.data().email;
  const profileUsernam = userData?.data().username;
  const profileDocId = userData?.data().userId;
  const image = userData?.data().photoURL;
  const profileUserId = userData?.data().userId;
  const fullName = userData?.data().fullName;

  //console.log(stories);

  useEffect(() => {
    if (!loading && user) {
      async function updateUserData() {
        dispatch(
          login({
            profileDocId: profileDocId,
            email: email,
            profileUsername: profileUsernam,
            image: image,
            profileUserId: profileUserId,
            fullName: fullName,
          })
        );
      }
      updateUserData();
    }
  }, [loading, user]);

  useEffect(() => {
    dispatch(addUserList(JSON.parse(usersList)));
  }, []);

  return (
    <div className="bg-gray-50 h-screen overflow-y-scroll scrollbar-hide">
      <Head>
        <title>ZH Instagram</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header usersList={JSON.parse(usersList)} />
      <Feeds stories={JSON.parse(stories)} noUserphotos={JSON.parse(photos)} />
      {openPostStoryModal && <PostStoriesModal />}
      {openViewStoriesModal && (
        <ViewStoriesModal stories={JSON.parse(stories)} />
      )}
      {menuModal && <MenuModal />}
      {postImageModal && <PostImageModal />}
    </div>
  );
}

export async function getServerSideProps(context) {
  const ref = db.collection("users");
  const photoRef = db.collection("photos");
  const storyRef = db.collection("stories");

  const usersRes = await ref.get();
  const users = usersRes.docs.map((user) => ({
    id: user.id,
    ...user.data(),
  }));

  const photoRes = await photoRef.get();
  const photos = photoRes.docs.map((photo) => ({
    id: photo.id,
    ...photo.data(),
  }));

  const storiesRes = await storyRef.get();
  const stories = storiesRes.docs.map((story) => ({
    id: story.id,
    ...story.data(),
  }));

  return {
    props: {
      usersList: JSON.stringify(users),
      photos: JSON.stringify(photos),
      stories: JSON.stringify(stories),
    },
  };
}
