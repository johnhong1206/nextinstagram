import { useEffect, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";

//components
const Header = dynamic(() => import("../components/Header/Header"));
const Feeds = dynamic(() => import("../components/Feeds/Feeds"));
const ViewStoriesModal = dynamic(() =>
  import("../components/Modal/ViewStoriesModal")
);
const MenuModal = dynamic(() => import("../components/Modal/MenuModal"));

//config
import db, { auth } from "../config/firebase";
import { useAuthState } from "react-firebase-hooks/auth";

//redux
import { useDispatch, useSelector } from "react-redux";
import { addUserList, login } from "../features/userSlice";
import {
  selectMenuModalIsOpen,
  selectPostImageModalIsOpen,
  selectPostStoriesModalIsOpen,
  selectViewStoriesModalIsOpen,
} from "../features/modalSlice";

export default function Home({ usersList, stories }) {
  const [user] = useAuthState(auth);
  //const userDataRef = db.collection("users").doc(user?.uid);
  //const [userData, loading] = useDocument(userDataRef);
  const [userData, setUserData] = useState([]);
  const [photo, setPhoto] = useState([]);
  const [myPhtoto, setMyphoto] = useState([]);

  const userId = user?.uid;

  //const { stories } = useStories(newUserData);

  const openPostStoryModal = useSelector(selectPostStoriesModalIsOpen);
  const openViewStoriesModal = useSelector(selectViewStoriesModalIsOpen);
  const menuModal = useSelector(selectMenuModalIsOpen);
  const postImageModal = useSelector(selectPostImageModalIsOpen);
  //const [userList, setUserList] = useState([]);
  //const [snapshot] = useCollectionOnce(db.collection("users"));
  const dispatch = useDispatch();

  const following = userData?.following;

  const [allphotos, setAllPhotos] = useState([]);

  useEffect(() => {
    db.collection("users")
      .doc(user?.uid)
      .get()
      .then((documentSnapshot) => {
        if (!documentSnapshot.exists) {
        } else {
          //console.log('User data: ', documentSnapshot.data());
          setUserData(documentSnapshot.data());
        }
      });
  }, [db, user]);

  useEffect(() => {
    dispatch(addUserList(JSON.parse(usersList)));
  }, []);

  useEffect(() => {
    let unsubscribe;

    const fetchPhotos = () => {
      if (user) {
        const followingUsers = following?.length > 0 ? following : ["test"];
        const allphoto = [];

        unsubscribe = db
          .collection("photos")
          .where("userId", "in", [...followingUsers])
          .onSnapshot((snapshot) => {
            setPhoto(
              snapshot?.docs.map((doc) => ({
                id: doc?.id,
                ...doc?.data(),
              }))
            );
          });
      } else {
        unsubscribe = db.collection("photos").onSnapshot((snapshot) => {
          setPhoto(
            snapshot?.docs.slice(0, 2).map((doc) => ({
              id: doc?.id,
              ...doc?.data(),
            }))
          );
        });
      }
    };
    fetchPhotos();
    return unsubscribe;
  }, [db, following, user]);

  useEffect(() => {
    let unsubscribe;

    const fetchMyPhotos = () => {
      if (user) {
        unsubscribe = db
          .collection("photos")
          .where("userId", "==", user?.uid)
          .onSnapshot((snapshot) => {
            setMyphoto(
              snapshot?.docs.map((doc) => ({
                id: doc?.id,
                ...doc?.data(),
              }))
            );
          });
      } else {
        setMyphoto([]);
      }
    };
    fetchMyPhotos();
    return unsubscribe;
  }, [db, user]);

  useEffect(() => {
    let unsubscribe;
    const joinPhotos = () => {
      let allphoto = [];
      allphoto.push(
        ...myPhtoto.sort((a, b) => b.timestamp - a.timestamp),
        ...photo.sort((a, b) => b.timestamp - a.timestamp)
      );
      setAllPhotos(allphoto);
    };
    joinPhotos();
    return unsubscribe;
  }, [myPhtoto, photo]);

  return (
    <div className="bg-gray-50 h-screen overflow-y-scroll scrollbar-hide">
      <Head>
        <title>ZH Instagram</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header usersList={JSON.parse(usersList)} />
      <Feeds photo={allphotos} />

      {openViewStoriesModal && <ViewStoriesModal />}
      {menuModal && <MenuModal />}
    </div>
  );
}

export async function getServerSideProps(context) {
  const ref = db.collection("users");

  const usersRes = await ref.get();
  const users = usersRes.docs.map((user) => ({
    id: user.id,
    ...user.data(),
  }));

  return {
    props: {
      usersList: JSON.stringify(users),
    },
  };
}
